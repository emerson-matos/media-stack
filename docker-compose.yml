version: "3.9"
name: media-stack
services:

  # To use/enable VPN, Run this compose file with --profile=vpn. Its highly recommended to use VPN.
  vpn:
  ## Read https://github.com/qdm12/gluetun/wiki for details on configuring VPN for different service providers.
    profiles: ["vpn"]
    container_name: vpn
    image: qmcgaw/gluetun:v3.35.0
    cap_add:
      - NET_ADMIN
    environment:
      - OPENVPN_USER=${OPENVPN_USER:-""}
      - OPENVPN_PASSWORD=${OPENVPN_PASSWORD:-""}
      - VPN_SERVICE_PROVIDER=${VPN_SERVICE_PROVIDER:-protonvpn} # Valid values: nordvpn, expressvpn, protonvpn, surfshark or custom

      ## For list of server countries, visit https://raw.githubusercontent.com/qdm12/gluetun/master/internal/storage/servers.json

      ## SERVER_REGIONS is required for NordVPN and Surfshark VPN. Comment SERVER_COUNTRIES if SERVER_REGIONS is used.
      # - SERVER_REGIONS=${SERVER_REGIONS:-Netherlands}
    
      ## SERVER_COUNTRIES is required for ExpressVPN and ProtonVPN. Comment SERVER_REGIONS if SERVER_COUNTRIES is used.
      - SERVER_COUNTRIES=${SERVER_COUNTRIES:-Netherlands}
      - FREE_ONLY=on  # Valid with protonvpn only. on if using free service provided by protonvpn

      ## Enable below if VPN_SERVICE_PROVIDER=custom
      # - VPN_TYPE=openvpn # or wireguard. 

      ## If VPN_TYPE is openvpn
      # - OPENVPN_CUSTOM_CONFIG=/gluetun/custom.conf

      ## If VPN_TYPE is wireguard. Replace below env variables as required.
      # - VPN_ENDPOINT_IP=1.2.3.4                                               # Replace with your wg endpoint ip or domain
      # - VPN_ENDPOINT_PORT=51820                                               # Replace with wg server port
      # - WIREGUARD_PUBLIC_KEY=wAUaJMhAq3NFutLHIdF8AN0B5WG8RndfQKLPTEDHal0=     # Replace with your wg public key
      # - WIREGUARD_PRIVATE_KEY=wOEI9rqqbDwnN8/Bpp22sVz48T71vJ4fYmFWujulwUU=    # Replace with your wg client private key
      # - WIREGUARD_PRESHARED_KEY=xOEI9rqqbDwnN8/Bpp22sVz48T71vJ4fYmFWujulwUU=  # Replaced with your wg pre-shared key
      # - WIREGUARD_ADDRESSES="10.64.222.21/32"                                 # Replace with wg address

    ## Enable volume if VPN_SERVICE_PROVIDER=custom and VPN_TYPE=openvpn is used
    # volumes:
      # - /yourpath/yourconfig.conf:/gluetun/config.conf:ro

    networks:
      - mynetwork
    ports:
      # qbittorrent ports
      # - 5080:5080
      # - 6881:6881
      # - 6881:6881/udp
      # prowlarr ports
      # - 9696:9696
      # Transmission ports. Uncomment below if Transmission is used with VPN
      # - 51413:51413
      # - 51413:51413/udp
    volumes:
      - "/home/emerson/.netflox/midia/tx-config:/config"
      - "/home/emerson/.netflox/midia/torrent-downloads:/downloads"
      - "/home/emerson/.netflox/midia/tx-watch:/watch"
    restart: "unless-stopped"

  ## Default credentials of qBittorrent - Username: admin password: adminadmin ##
  ## Change password after install from UI --> Tools --> Options --> WebUI ##
  qbittorrent:
    container_name: qbittorrent
    profiles: ["qbt", "stack-2"]
    image: lscr.io/linuxserver/qbittorrent:4.5.5
    # Unomment below if vpn is enabled
    depends_on:               # Uncomment this line if vpn is enabled
      - vpn                   # Uncomment this line if vpn is enabled

    # Comment below lines if VPN is enabled
    networks:               # Comment this line if vpn is enabled
      - mynetwork           # Comment this line if vpn is enabled

    # Unomment below line if vpn is enabled
    network_mode: service:vpn

    environment:
      - PUID=1000
      - PGID=1000
      - TZ='America/Sao_Paulo'
      - WEBUI_PORT=5080
    volumes:
      - "/home/emerson/.netflox/midia/qbittorrent-config:/config"
      - "/home/emerson/.netflox/midia/torrent-downloads:/downloads"

    ## Comment/Disable below ports if VPN is enabled
    ports:
      - 5080:5080
      - 6881:6881
      - 6881:6881/udp
    restart: "unless-stopped"

  radarr:
    container_name: radarr
    image: lscr.io/linuxserver/radarr:5.0.3
    networks:
      - mynetwork
    environment:
      - PUID=1000
      - PGID=1000
      - TZ='America/Sao_Paulo'
    # ports:
      # - 7878:7878
    volumes:
      - "/home/emerson/.netflox/midia/radarr-config:/config"
      - "/home/emerson/.netflox/midia/torrent-downloads:/downloads"
    restart: "unless-stopped"

  sonarr:
    profiles: ["base", "sonarr", "stack-1", "stack-2"]
    image: linuxserver/sonarr:4.0.0-develop
    image: lscr.io/linuxserver/sonarr:4.0.0-develop
    container_name: sonarr
    networks:
      - mynetwork
    environment:
      - PUID=1000
      - PGID=1000
      - TZ='America/Sao_Paulo'
    volumes:
      - "/home/emerson/.netflox/midia/sonarr-config:/config"
      - "/home/emerson/.netflox/midia/torrent-downloads:/downloads"
    # ports:
      # - 8989:8989
    restart: unless-stopped

  jackett:
    profiles: ["jackett", "stack-1"]
    container_name: jackett
    image: lscr.io/linuxserver/jackett:latest
    networks:
      - mynetwork
    environment:
      - PUID=1000
      - PGID=1000
      - TZ='America/Sao_Paulo'
    volumes:
      - "/home/emerson/.netflox/midia/jackett-config:/config"
      - "/home/emerson/.netflox/midia/jackett-blackhole:/downloads"
    # ports:
      # - 9117:9117
    restart: unless-stopped

  prowlarr:
    container_name: prowlarr
    image: lscr.io/linuxserver/prowlarr:1.8.6
    # Comment this if vpn is disabled
    depends_on:
      - vpn
    network_mode: service:vpn # Comment this line if vpn is disabled
    networks:
      - mynetwork

    environment:
      - PUID=1000
      - PGID=1000
      - TZ='America/Sao_Paulo'
    volumes:
      - "/home/emerson/.netflox/midia/prowlarr-config:/config"

    # Comment below ports if VPN is enabled.
    ports:
      - 9696:9696
    restart: unless-stopped

  jellyfin:
    profiles: ["base", "jelly", "stack-1", "stack-2"]
    image: lscr.io/linuxserver/jellyfin:10.8.11
    container_name: jellyfin
    networks:
      - mynetwork
    environment:
      - PUID=1000
      - PGID=1000
      - TZ='America/Sao_Paulo'
      - NVIDIA_VISIBLE_DEVICES=all
    volumes:
      - "/home/emerson/.netflox/midia/jellyfin-config:/config"
      - "/home/emerson/.netflox/midia/torrent-downloads:/data"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    # ports:
      # - 8096:8096
      # - 7359:7359/udp
      # - 8920:8920
    restart: unless-stopped
  
  # Doc: https://github.com/navilg/cleanmyarr
  # cleanmyarr:
  #   depends_on:
  #     - radarr
  #     - sonarr
  #   image: linuxshots/cleanmyarr:0.8.1
  #   container_name: cleanmyarr
  #   networks:
  #     - mynetwork
  #   volumes:
  #     - cleanmyarr-config:/config
    # restart: unless-stopped
    # environment:
    # - CMA_MAINTENANCE_CYCLE=${CMA_MAINTENANCE_CYCLE:-""}
    # - CMA_DELETE_AFTER_DAYS=${CMA_DELETE_AFTER_DAYS:-""}
    # - CMA_ENABLE_EMAIL_NOTIFICATION=${CMA_ENABLE_EMAIL_NOTIFICATION:-""}
    # - CMA_SMTP_USERNAME=${CMA_SMTP_USERNAME:-""}
    # - CMA_SMTP_ENCODED_PASSWORD=${CMA_SMTP_ENCODED_PASSWORD:-""}
    # - CMA_SMTP_TO_EMAILS=${CMA_SMTP_TO_EMAILS:-""}
    # - CMA_ENABLE_GOTIFY_NOTIFICATION=${CMA_ENABLE_GOTIFY_NOTIFICATION:-""}
    # - CMA_GOTIFY_URL=${CMA_GOTIFY_URL:-""}
    # - CMA_GOTIFY_ENCODED_APP_TOKEN=${CMA_GOTIFY_ENCODED_APP_TOKEN:-""}
    # - CMA_ENABLE_TELEGRAM_NOTIFICATION=${CMA_ENABLE_TELEGRAM_NOTIFICATION:-""}
    # - CMA_TELEGRAM_ENCODED_BOT_TOKEN=${CMA_TELEGRAM_ENCODED_BOT_TOKEN:-""}
    # - CMA_TELEGRAM_CHAT_ID=${CMA_TELEGRAM_CHAT_ID:-""}
    # - CMA_MONITOR_RADARR=${CMA_MONITOR_RADARR:-""}
    # - CMA_RADARR_URL=${CMA_RADARR_URL:-""}
    # - CMA_RADARR_ENCODED_API_KEY=${CMA_RADARR_ENCODED_API_KEY:-""}
    # - CMA_RADARR_ENABLE_NOTIFICATION=${CMA_RADARR_ENABLE_NOTIFICATION:-""}

  portainer:
    profiles: ["infra"]
    container_name: portainer
    image: portainer/portainer:latest
    restart: unless-stopped
    networks:
      - mynetwork
    environment:
      - PUID=1000
      - PGID=1000
      - TZ='America/Sao_Paulo'
    volumes:
      - /opt/portainer:/data
      - /var/run/docker.sock:/var/run/docker.sock
  # More info at https://github.com/pi-hole/docker-pi-hole/ and https://docs.pi-hole.net/
  pihole:
    profiles: ["infra"]
    container_name: pihole
    image: pihole/pihole:latest
    restart: unless-stopped
    # For DHCP it is recommended to remove these ports and instead add: network_mode: "host"
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      # - "67:67/udp" # Only required if you are using Pi-hole as your DHCP server
      - "8053:80/tcp"
    environment:
      TZ: 'America/Sao_Paulo'
      WEBPASSWORD: 'pihole'
      ServerIP: '172.19.0.14'
      DNS1: '172.19.0.13#5053'
      DNS2: ''
      IPv6: false
      DNSMASQ_LISTENING: all
    volumes:
      - '/home/emerson/.netflox/pihole/etc-pihole:/etc/pihole'
      - '/home/emerson/.netflox/pihole/etc-dnsmasq.d:/etc/dnsmasq.d'
    #   https://github.com/pi-hole/docker-pi-hole#note-on-capabilities
    networks:
      mynetwork:
      pihole:
        ipv4_address: 172.19.100.14
    dns:
      - 127.0.0.1
      - 1.1.1.1
    # cap_add:
      # - NET_ADMIN

  cloudflared:
    profiles: ["infra"]
    container_name: cloudflared
    image: cloudflare/cloudflared
    restart: unless-stopped
    command: proxy-dns
    networks:
      mynetwork:
      pihole:
        ipv4_address: 172.19.100.13

  heimdall:
    profiles: ["infra"]
    image: linuxserver/heimdall
    container_name: heimdall
    volumes:
      - /home/emerson/.netflox/midia/heimdall:/config
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Sao_Paulo
    networks:
      - mynetwork
    ports:
      - 88:80
    restart: unless-stopped

networks:
  pihole:
    driver: bridge
    ipam:
      config:
        - subnet: 172.19.100.0/28
  mynetwork:
    driver: bridge
    ipam:
      config:
        - subnet: 172.19.0.0/28
